#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node(int value){
        data=value;
        next=NULL;
    }
};
class Linkedlist{
    public:
    Node* head;
    Linkedlist(){
        head=NULL;
    }
    void insertAtBegin(int value){
        Node* newNode = new Node(value);
        if(head==NULL){
            head=newNode;
        }
        else{
            newNode->next=head;
            head=newNode;
        }
    }
    void insertAtEnd(int value){
        Node* newNode= new Node(value);
        Node* temp=head;
        if(head==NULL){
            head=newNode;
        }
        else{
            while(temp->next!=NULL){
                temp=temp->next;
            }
            temp->next=newNode;
        }
    }
    void insertAtPosition(int value,int position){
        Node* newNode = new Node(value);
        Node* temp=head;
        for(int i=0;i<position && temp!=NULL;i++){

        temp=temp->next;
        }
        if(temp==nullptr){
            cout<<"position is out of range"<<endl;
            return;
            }
            else{
                newNode->next=temp->next;
                temp->next=newNode;
    }
    }
    //display 
    void display(){
        Node* temp = head;
        while(temp!=nullptr){
            cout<<temp->data<<"->";
temp=temp->next;
            }
            cout<<"NULL"<<endl;
    }
     void deleteAtBeginning(){
        Node* temp = head;
        if(head==nullptr){
            cout<<"linked list is empty"<<endl;
            return;
            }
            else{
                head=head->next;
                delete temp;
                }
    }
    void deleteFromEnd(){
        Node* temp = head;
        Node* prev = nullptr;
        if (head == nullptr){
            cout<<"linked list is empty"<<endl;
            return;
            
        }
        else{
            while(temp->next!=nullptr){
                prev=temp;
                temp=temp->next;
                }
                prev->next=nullptr;
        }
    }
    //deleting at specific position
    void deleteAtPosition(int position) {
    if (head == nullptr) {
        cout << "Linked list is empty" << endl;
        return;
    }

    Node* temp = head;
    Node* prev = nullptr;

    if (position == 1) {
        head = temp->next;
        delete temp;
        return;
    }

    for (int i = 1; i < position && temp != nullptr; i++) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Position out of range" << endl;
        return;
    }

    prev->next = temp->next;
    delete temp;
}
};
//main function
int main(){
    Linkedlist list;
    list.insertAtBegin(200);
    list.insertAtBegin(100);
    list.insertAtEnd(300);
    list.insertAtPosition(400,2);
    list.insertAtBegin(50);
    list.display();
    list.deleteAtBeginning();
    list.deleteFromEnd();
    list.deleteAtPosition(2);
    list.display();
    return 0;
}
    
